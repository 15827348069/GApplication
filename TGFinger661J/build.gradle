apply plugin: 'com.android.library'

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def _BASENAME = "TG661JFinger";
def _VERSION = "_V1.1.0.190416_beta";
def _DestinationPath = "src/main/jniLibs"; //生成jar包的位置
def zipFile = file('build/intermediates/intermediate-jars/release/classes.jar'); //待打包文件位置

task deleteBuild(type: Delete) {
    delete _DestinationPath + _BASENAME + _VERSION + ".jar"
}

task makeJar(type: Jar) {
    from zipTree(zipFile)
    from fileTree(dir: 'src/main', includes: ['assets/**']) //将assets目录打入jar包
    from fileTree(dir: 'src/main/res', includes: ['drawable/**'])
    from fileTree(dir: 'src/main/res', includes: ['drawable-v24/**'])
    from fileTree(dir: 'src/main/res', includes: ['layout/**'])
    from fileTree(dir: 'src/main/res', includes: ['raw/**'])
    from fileTree(dir: 'src/main/res', includes: ['values/**'])
    from fileTree(dir: 'src/main', includes: ['AndroidManifest.xml'])
    from fileTree(dir: 'libs', includes: ['armeabi/libjnidispatch.so'])
    from fileTree(dir: 'libs', includes: ['armeabi/libTG_FV.so'])
    from fileTree(dir: 'libs', includes: ['armeabi/libTGVM661J.so'])
    from fileTree(dir: 'libs', includes: ['jna-min.jar'])
    from fileTree(dir: 'libs', includes: ['jna-platform.jar'])
    baseName = _BASENAME + _VERSION
    destinationDir = file(_DestinationPath)
}

makeJar.dependsOn(deleteBuild, build)

